// Code generated by go-bindata.
// sources:
// assets/app.css
// assets/app.html
// assets/app.js
// assets/back.svg
// assets/main.svg
// assets/next.svg
// assets/pause.svg
// assets/play.svg
// assets/prev.svg
// assets/random.svg
// assets/repeat.svg
// assets/settings.svg
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAppCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xf1\x6e\xa3\xb8\x13\xfe\xbb\x3c\x85\xb5\x55\xa5\xed\x4f\x25\x02\x12\xd2\x96\xea\x77\xba\xf7\x38\x9d\x56\x0e\x38\x89\xaf\x60\x23\x63\xd2\x64\x57\x79\xf7\x93\xb1\x31\xb6\x31\x09\xc9\x49\xab\xa8\xab\xc5\x98\x6f\xbe\x19\x8f\x67\x3e\x7b\x43\x8b\x13\xf8\x15\x00\x00\x40\xf8\x85\x36\x9f\x98\x87\x1c\x1d\x79\xd8\xe0\x9f\x28\x84\xc5\x3f\x6d\xc3\x33\x10\x47\xd1\xd3\x47\x37\xa7\x82\x6c\x87\x49\x06\xa2\xfa\x28\x07\x36\x94\x15\x88\x19\x03\x35\x2c\x0a\x4c\x76\x6a\xe4\x1c\x04\x7b\x04\x0b\xc4\x5e\xc0\x96\x52\x8e\x98\xb2\x55\xd3\x06\x73\x4c\x49\x06\xb6\xf8\x88\x0a\xf9\xe9\xcf\x10\x93\x02\x1d\x85\x3d\xf1\xa5\xfc\x50\x7d\x50\xa2\x2d\x37\xac\x7c\xe1\x82\xef\x4d\x62\x9c\xd6\xc6\xeb\x3d\xc2\xbb\x3d\xcf\xc0\x6b\x4f\xc2\x32\xbe\xa1\x9c\xd3\x6a\x0a\xed\x1c\xfc\x59\xa1\x02\x43\xf0\x9d\x32\x8c\x08\x87\x92\x67\x4d\x19\x67\x10\xf3\x67\x05\x62\x21\x9a\x36\xe3\x95\xc6\x3d\x4f\x81\x95\x90\x14\x4d\x0e\x6b\x74\x15\xed\xdd\x02\x0b\x82\x06\xe5\x02\x62\x14\x46\xb8\x69\x68\xd9\x72\x64\x44\xe3\x4d\x7f\x3a\x04\xb6\x0b\xc6\x2c\xff\x6c\x43\x9e\x25\xf0\x2e\x83\x9b\x01\xdd\x5f\x9c\x1a\x4e\x88\x7f\x1f\x4b\xdc\x70\x03\xb9\xc0\x4d\x5d\xc2\x53\x06\x08\x25\xe8\xd6\xd0\x8d\x89\x2a\x56\xe9\x45\x52\xef\x57\x38\x39\xde\xaa\x49\x15\xc4\xe3\x90\x68\x43\xdd\x12\x49\x20\x5a\xf6\x89\x8b\x1b\x1e\x36\xfc\x54\xa2\x90\x9f\x6a\x64\xfa\xa8\x39\xc5\xda\x4c\x4e\x4b\xca\x32\xf0\xb8\x8a\xc4\x6f\xb4\xe7\x40\x9c\x4c\xee\x33\x69\x77\x51\x97\x03\xc5\x21\x3d\x18\x2a\x21\xc7\x07\xdb\x70\x28\xd3\xc4\xdd\x34\x4b\xcd\x66\x4b\x89\xac\x04\x19\x88\xdf\xec\x1d\x1f\xf6\x9b\xa8\xa1\x25\x2e\x40\x5c\x1f\xc1\xe3\x36\x12\x3f\x93\x4c\x43\xc9\xee\x0a\x97\xde\xea\x2a\x9a\x6f\x60\x88\x8a\x9e\xa5\xe3\xa2\xc6\x3b\xd7\x56\x32\x34\x26\x99\x05\x67\x30\xff\x7c\x01\xd6\x58\x89\xc8\x8e\xef\xbd\x83\x3f\x1a\x54\x43\x06\x39\x65\xce\x6b\x54\xc2\xba\x41\xc5\x95\x8d\xd8\xd3\x8b\x57\xbe\x98\x26\x53\xfc\xc6\x45\xcf\x99\x65\x5b\x67\x32\x84\xeb\x65\x6f\x44\x96\xf0\x3d\x2c\xe8\x57\xd6\x85\x2e\x56\x59\xff\xb5\xc7\x82\x9a\x83\xe6\xba\x6a\xc3\x0e\xbb\xf7\x2e\x58\x1b\x2c\xbe\x17\x8c\x63\x5e\xa2\x2b\xd1\x96\xf1\x1a\x32\xa9\x4b\x82\xd8\x2d\xf3\x39\x2c\xf3\xef\xa2\x64\x81\x10\xc4\x49\x54\x1f\x9f\x2f\x64\x7b\x89\x09\x0a\x87\xd2\x3e\x8f\xfc\x4b\xff\x34\xed\x0e\x64\x7c\xa8\x37\x17\xcb\x78\xa2\x8d\xba\xee\x4d\xa7\x12\x2c\x37\x6d\x35\x73\xe3\xa5\x37\x6c\x3c\xc7\xc0\xa2\x80\xfc\xda\x9a\xc8\x35\x70\x7c\x88\xa7\x7d\x30\xab\xe0\x5b\x24\x7e\x1e\xa1\xe1\xf2\xf0\xfb\xeb\x23\x92\xd8\x44\x06\xe7\xed\x85\x9e\xb9\x93\x7c\x0b\xed\x78\x95\x24\x5e\xa9\xe4\xf5\x60\x7e\x52\x0c\x35\x5a\xfa\x91\x78\x03\xba\x9a\x30\x1d\xcc\xd4\x00\xb2\xdd\xc9\xad\xf7\xd2\x3f\x49\x92\xfa\x51\x55\x22\xfd\x5c\x20\x0e\x71\x69\xf4\x48\xaf\xd4\xf3\xa5\xc2\xfc\x96\xff\x3b\x78\x39\x4d\xdd\xb0\xa8\x30\x1c\x8d\x35\x92\x42\xc6\x42\x2c\x93\xbe\x47\x9b\x54\x15\x8e\x5f\xca\xc6\xcb\x91\x98\xf5\xae\x71\xb2\xb6\xa1\xed\xc6\xd0\x41\x69\x4f\xa4\x63\xeb\xfe\x71\x64\x58\x67\xbf\xcf\x87\xd5\x9b\x6d\xc8\x8a\xa7\xa4\x6c\x6e\xa6\xb9\xa2\x67\x40\x2c\xb1\x02\x73\x77\xff\x60\x33\xa7\x84\x33\xad\xac\xae\xf7\x5c\xcd\xc7\x6a\x3e\x02\x0f\x31\x46\x2f\x9e\x45\xa4\x7e\x70\x01\x22\x5b\x65\x98\xd9\xab\xfd\x4a\x9d\x8c\x58\x46\x43\x81\x85\xf9\xe7\x8e\xd1\x96\x14\x61\xef\xe4\x76\x1b\xaf\xde\x97\xf2\xb5\x23\x83\x07\x9e\x7f\x80\xff\x29\xae\xb6\xdd\x73\x10\x6c\x5a\xce\xb5\xf8\xa5\x2d\x17\x65\x2c\x03\x91\x4f\x23\x82\x59\xe7\xb7\x31\x47\xb6\xdb\xc0\xef\x49\x9a\xbe\xf4\x7f\xd1\xb3\x2c\x22\x8f\x15\x22\xad\xd8\x60\x88\xb4\x80\xc0\x83\xf1\x5f\x60\xf1\x1a\x19\x19\xd1\x18\xab\xd9\x0e\x49\xa3\x3c\x5c\xae\xea\x3a\xe6\x66\x04\x1e\xd4\x02\xc8\x55\x7c\xb0\x85\xe6\xfc\x52\x23\x78\x2c\x36\x83\x28\xf3\x97\x2e\x63\xae\xc8\x55\x77\xea\xab\x7f\x6a\x83\x38\xc7\x64\xd7\x28\xe8\x87\x91\x48\x9a\xac\x89\xe3\x52\x3d\xcd\x33\x7d\x9a\xc9\xb2\x53\x46\x69\x27\x8c\x0c\x5d\x34\x87\x71\x6a\x14\x4b\x6b\xe9\x70\x25\x0e\x00\x57\x96\x22\x78\x14\x79\x6f\x70\x57\xd3\x93\x78\x3a\x4f\xed\x03\xf2\xec\xe5\x74\x0c\xdd\xd4\xa0\x80\xef\xee\xc0\x9b\xce\x67\xdb\xd8\x8f\x03\x2d\xdb\x0a\xcd\xb7\x99\xc4\xbe\x63\xf6\xab\x79\xa0\xf5\x88\xd9\xae\xd2\x3c\x8f\x69\xad\x3a\x95\x72\x6b\x42\x79\x22\xd5\x03\x8a\x42\x0f\x60\xcb\xe9\x80\x7a\xaf\xbf\xba\x58\x7b\x3d\x1e\x3a\x51\x97\x58\x9a\x92\x4c\xae\x17\xe0\x8e\x64\x5b\x9a\xb7\xcd\x78\x5c\xa5\xe1\x6f\xae\x91\xbe\x34\x75\x99\x89\xf3\xfa\xc9\xa0\xa7\x1c\x7f\x1f\xef\x8c\x7e\x3e\x43\x87\xf1\xfc\xf5\xe4\x7c\x82\x8e\x7c\xce\xfc\x7e\xcd\x30\xa9\x5b\xfe\x97\xe8\xda\xff\xff\xc6\x20\xd9\xa1\x6f\x7f\xab\x4f\x7b\x57\xde\x9c\x06\xf7\xee\xb9\x1c\xd4\x05\xa1\xbf\x54\x84\x75\x8d\x20\x83\x24\xb7\xc4\xc0\x10\x48\xe7\xce\x43\x1d\x45\x18\x2c\x70\xdb\xf4\x32\x7d\x26\xdd\x2c\xeb\x8d\x36\x25\x16\x28\x7c\xdf\x56\x1b\xe7\x92\xf3\x46\x3e\x7d\x41\x5a\x8d\x44\x99\xa3\xb1\x0d\xca\x4f\x0e\xe3\x4e\xef\x8f\xf2\xf1\xce\xb6\xe4\x45\xf5\xed\x37\xbb\x5d\x02\x7d\xaa\x4c\xa7\x6a\x95\x3c\x96\x30\x54\x23\x68\xde\x87\x8d\x2e\x03\x26\xbe\x83\xa4\xa0\xd5\xf8\xbb\x7b\x5a\xda\x7f\xf5\xf1\xf5\x56\x1f\xbd\xed\x72\xa6\x83\xa9\x75\x5c\x68\xda\x4d\xd7\x05\x2f\x28\x4c\xa5\xc6\xd7\x8b\xf5\xda\x16\xe4\xcb\xe5\x62\xb9\x34\xcf\x02\x69\xaa\x6a\x47\x8f\x7a\xd3\xe5\xe2\x74\x5d\x73\xae\xbd\x35\xbc\x15\xe9\xc9\x53\xc2\xea\x92\xac\x2d\x22\xf1\xf3\xa0\x66\x7b\x7a\xd0\x17\xdd\xf7\x61\xe7\x91\xf8\x19\xea\x37\x83\x39\xc7\x07\x64\x6c\x2a\x48\x70\xa5\xb2\x4a\xbe\xfb\x21\xde\x25\x8d\xbc\xfe\xfe\x44\xa7\x2d\x83\x15\x6a\xcc\x97\xbf\x82\xe8\x09\xfc\xa2\x35\xcc\x31\x3f\x65\x20\x5a\xa4\x1f\xe7\x20\x75\xc6\x5e\x3f\xce\x41\xd7\x6c\x87\xc1\x78\x11\x7d\x88\x35\xff\x37\x00\x00\xff\xff\x22\x73\x07\x03\x49\x19\x00\x00")

func assetsAppCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppCss,
		"assets/app.css",
	)
}

func assetsAppCss() (*asset, error) {
	bytes, err := assetsAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.css", size: 6473, mode: os.FileMode(436), modTime: time.Unix(1490870326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAppHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\xb0\x3c\x47\xe1\x2e\x72\x29\x02\x4a\x97\x7e\xdc\x8a\x16\x68\x5a\xa0\xa7\x62\x44\xcd\x5a\xac\x29\x92\x20\x47\xb2\xf5\xef\x0b\x92\x92\x57\x72\xec\x38\xa7\x25\xdf\x8c\xde\x7c\xbc\xe1\xac\xe5\x0f\x3f\xff\xfe\xd3\x97\x7f\xfe\xf8\x85\xf5\x34\x98\xe6\x20\xd7\x3f\x08\x5d\x73\x90\x03\x12\x30\xd5\x43\x88\x48\x35\xff\xeb\xcb\xaf\xd5\x8f\x5c\xac\xb8\x85\x01\x6b\x3e\x69\x3c\x7b\x17\x88\x33\xe5\x2c\xa1\xa5\x9a\x9f\x75\x47\x7d\xdd\xe1\xa4\x15\x56\xf9\xf2\x81\x69\xab\x49\x83\xa9\xa2\x02\x83\xf5\xeb\x07\x36\x68\xab\x87\x71\x58\x01\xbe\x67\x05\xef\x0d\x56\x83\x6b\xb5\xc1\xea\x8c\x6d\x05\xde\x57\x0a\x3c\xb4\x06\x37\x91\x66\x8c\xdf\xf3\x61\x24\xa0\x31\x56\x2d\x84\x2a\xd2\xbc\x63\x68\x0d\xa8\x53\x45\x01\x6c\x34\xa3\x42\x4b\x89\xcf\x68\x7b\x62\x01\x4d\xcd\xb3\x7b\xec\x11\x89\x33\x9a\x3d\xd6\x9c\xf0\x42\x42\xc5\xc8\x59\x1f\xf0\xad\xe6\x02\x62\x44\x8a\x02\xbc\xff\x98\xe0\xe6\x20\xa3\x0a\xda\x13\x8b\x41\xed\xcd\xff\x45\xde\x48\x51\xac\xcd\x41\x92\x26\x83\xcd\x34\x49\x51\x4e\x07\x29\x96\xb6\xb7\xae\x9b\x17\x11\x30\x34\x07\xc6\x18\x93\x16\x26\xa6\xbb\x9a\x0f\x68\x47\x5e\xb0\x8c\xb7\x23\x91\xb3\x4c\x19\x88\xb1\x6e\x41\x9d\x96\x3c\x0b\xce\x1b\xa9\x87\xe3\x3e\x95\xe4\xf4\x31\x4e\x47\xce\xc0\xa4\x0e\x80\x3a\xa5\xbc\xca\x07\x8f\x98\x07\xd0\xf6\x29\x73\x72\xda\x30\xa7\xeb\x73\xe6\x88\x44\xda\x1e\xe3\x53\xf6\xd5\x71\x13\x61\x85\x6e\xa3\x48\x61\x61\xba\x69\x5c\x1c\xdb\xdc\x3b\x96\x35\xad\x79\xa7\xa3\x37\x30\x7f\x66\xd6\x59\xdc\x76\xd4\x99\xf7\x4b\x06\x8c\x6e\xf6\x29\x07\x34\x0e\xba\x9b\x84\x0b\x78\xcd\x43\x0a\xa3\x9f\xf1\x28\x67\xdf\xf4\xf1\x86\xa7\x80\x77\x78\x96\xa2\xca\x94\xa4\xb9\x90\x11\x15\x69\x67\x73\x79\x46\x47\x5a\xaa\xb8\x56\x20\x45\x3a\x49\xb1\xf8\xdd\x7c\x51\xe4\x29\x8e\x4a\x13\x2e\x49\xf1\x3c\x8d\xbc\xb1\x8e\xe5\x93\x14\xc9\xb8\xf8\x45\x0f\x6b\xf2\x1c\x02\xe5\x98\xd6\xb1\x72\x94\x22\x99\xef\x78\xa2\x01\x1f\xb1\xcb\xae\xa9\xe7\xda\x1e\x77\xbe\xa3\x59\x3d\x3b\x24\xd0\x26\xc9\x39\x7e\x23\xf3\xd2\xa2\x6f\x2a\x29\xfb\x4f\xcd\xdf\xce\x8c\x03\x4a\xd1\x7f\xba\xc6\xd9\xc8\x9c\xd4\xd0\xd6\x8f\xb4\xf4\x5f\xf5\xa8\x4e\xad\xbb\xf0\x32\x2d\xbd\x3b\xff\x3b\x65\x02\xde\xfc\xd9\xbb\x33\x2b\x17\x66\x5d\xbb\x97\x36\x11\xfd\x06\x97\xc5\xfe\x99\xed\x48\xed\x38\xb4\x18\xf8\xd2\xef\xcb\xca\x98\xb6\x5f\xcd\x5f\x5f\x38\x1b\xe0\x92\x0e\x2f\xa9\x18\xf4\x05\x9b\xc0\x8c\x58\xd0\x9d\xfc\xb7\x2d\x49\x5d\x57\x06\x33\x39\x86\xe0\xc2\x7b\xed\x37\x5a\x66\xeb\x2a\xe7\xb5\x1d\x5b\x89\x3a\x2c\x7b\x49\xa7\x11\x2c\xee\x1b\x68\x55\x4b\x8a\x25\x66\x73\xd8\x65\xf2\xe6\x1c\x7d\xb5\xa9\x92\x26\x65\xb9\x3c\x78\xf9\x3e\xe0\xb4\x1f\xfe\xb5\xf4\x64\xb9\xb7\x02\x12\xbe\x79\xfe\x8b\xdb\xf5\xa9\xec\xd9\x0d\xcc\x0f\xd8\x0d\xcc\xc2\xc3\x18\xf1\x6e\x0c\x03\xf3\x36\x86\x81\xf9\x61\x0c\x8b\x17\xba\x1f\x23\x59\xee\xb1\x27\x7c\xc3\xbe\xb8\x3d\x5d\x5e\x6b\x2f\xaf\x23\xf9\xde\xd2\xed\xb8\x05\xb0\xc7\x65\xba\x5e\xf2\x68\xbd\xbe\xbc\x94\xc1\x7a\xfd\x0e\xee\xcd\x0a\xf9\x5a\xac\x80\x1e\x81\xee\x54\x54\x0c\x9b\x9a\x0a\xf0\x7c\xf1\x07\xb0\x9d\x1b\xee\x31\x66\xc3\x96\x31\x03\x0f\xfa\x24\xc5\x3a\x7d\x52\x94\x7f\x9c\x69\x45\xe6\x9f\x31\xff\x07\x00\x00\xff\xff\x49\x98\xeb\x25\xde\x08\x00\x00")

func assetsAppHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppHtml,
		"assets/app.html",
	)
}

func assetsAppHtml() (*asset, error) {
	bytes, err := assetsAppHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.html", size: 2270, mode: os.FileMode(436), modTime: time.Unix(1490863833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x5d\x8f\xe3\x36\x92\xef\xf3\x2b\x38\x02\x6e\x2d\x5f\x7b\xdc\xee\xdc\xed\x3e\xc8\x71\x82\xdd\x64\x6e\x93\xc3\x4c\x12\x64\xe6\xe1\x00\xc3\x68\xd0\x12\xed\xe6\x58\x96\x14\x8a\x76\xb7\xd1\xf1\x7f\x3f\xf0\x4b\xe2\xa7\xa4\x76\x77\x0f\xee\x70\x37\x0f\x6e\x49\x2c\x56\x15\x8b\xc5\x62\x55\xb1\x38\x47\x48\xc0\xf1\x08\x16\xec\xe7\xcf\x3f\xc1\xe3\x1b\x00\x00\x28\xd7\x5f\x12\xf0\x78\x9e\xf0\x97\xba\x2c\xb6\xe6\x5b\xad\xbd\xd2\x92\xc0\x2d\x6a\x3f\xec\xcb\x0c\xe5\x09\x78\xcc\x71\x4d\xd9\x57\xf9\xf9\x88\xd1\x7d\x02\x1e\x11\x21\x25\xe1\xc0\x60\x0f\x71\x21\x9e\x14\xe8\x04\xa4\x65\xb1\xc1\x5b\xd9\x8e\x8a\x83\x78\xaa\x72\x78\x5a\xc3\x74\x27\xde\x50\x0e\xab\x1a\x65\xe2\x25\x23\x65\x95\x95\xf7\x85\x46\x29\x2d\x0b\x4a\xca\x1c\x08\x96\xce\xf3\x37\xc7\xe3\xb4\x5c\x7f\x01\x0b\x10\x6f\x0e\x45\x4a\x71\x59\xc4\x63\x31\x4c\xf5\x0e\xb6\x88\xfe\x4a\xde\xe7\x35\x8a\xf7\x13\xb0\x9b\x80\xe3\x58\x0a\x82\xfd\x23\x88\x1e\x48\x01\x76\x00\x17\x60\xff\x3d\xd8\x2f\x77\x2b\x90\x80\xe3\x9c\x03\x9c\xdf\x68\x20\x8f\x0d\x9e\xa4\x45\x79\x9e\xbf\x39\x8f\xe3\x31\xe7\x83\x09\xcf\xc7\x08\x9b\x04\x0a\x59\x53\xd3\xc2\x40\x27\x60\x87\x4e\xf5\x04\x94\xf4\x0e\x11\x9d\x25\x06\x8f\xe7\xcd\xeb\xa6\x24\x20\xc6\x8c\x3f\x06\xaf\x03\x2a\xe0\x1d\x3a\x81\x05\x6f\x5d\xe2\xd5\xdc\x68\xc6\x1b\x10\xb3\x66\x5c\xf0\xb9\xb5\x7b\x6b\xc3\x63\xcd\xcb\x1d\x3a\x59\x08\xce\x6f\xdc\x27\xd9\x83\x33\xae\x0b\x8a\xf1\xd2\x48\xc6\x3b\x5c\x77\xb4\xdd\x0c\x06\x79\x3b\x03\xc4\x68\xa8\xde\x8b\x05\x88\xfe\x9e\xaf\x0f\xfb\x4f\x25\xa1\x91\x1f\x09\x85\x5b\xc9\xc8\x52\xc0\x46\x2b\xc5\x4e\x27\x5a\x42\x71\x4d\x87\xe2\xe5\xc0\x03\x11\x33\x1e\x64\x87\x57\xc3\xfc\x14\x79\x48\x12\x13\xf0\x74\x62\x2f\x23\x76\x5f\x77\x4d\xc9\x1a\x3d\x33\xb4\xcd\xab\x67\x9e\x15\xde\x5a\x01\x4d\x1b\x47\xcb\xa2\x04\x23\x70\xc5\x97\xd0\x15\x18\xad\x46\x63\x5b\xa1\x6b\x4a\xfc\x2b\xd7\x5e\xb2\x75\x49\xa8\x58\x89\xa3\xd1\xfc\xb2\xc5\xac\x50\x5c\x2d\x7c\xec\xb2\xd5\x3d\x01\x23\x30\x1a\x87\xd7\xa4\xc4\xe0\x33\x5f\x0d\xa8\xcf\x8e\x4d\xf4\x56\xfe\xbd\xfd\x52\x53\x92\xb0\x1f\xf1\x85\x59\xbc\x78\xdc\x5a\xbc\x3a\x64\xf2\x18\x2b\xb6\xe4\x6a\x57\x74\xda\x12\xaf\xa7\x7b\x58\xc5\x46\x07\x5b\x42\x12\x7a\x29\x84\x22\x59\x98\xd6\x94\xe8\x13\xb3\x6a\xe5\x33\x9e\x32\x36\x1a\x9c\x20\x86\x13\xb0\xb6\x91\x32\x75\x86\xcb\x9b\x15\xf8\x16\xac\x97\x37\xab\x31\x78\x54\x74\xde\xdd\xcc\x1b\xe5\x54\xdf\xd8\x27\x9d\x80\xc9\xb3\xd6\xb9\x5e\xce\x56\x73\x70\x76\x34\xea\x50\xe0\x3f\xfc\x82\x09\xca\x65\x83\x73\x8a\x88\x36\x0c\x31\x5a\x0c\x26\xa0\x46\xf9\xc6\x37\x20\xcc\x56\xe7\xac\xc3\xe0\x53\x72\x40\x96\xad\x6f\x57\xb7\x92\xac\x7f\xd5\x80\xd1\x18\xbc\x5d\x00\x0f\x10\xca\x37\x4b\x0c\xde\x81\x9b\x95\x06\x7b\x09\x13\xc1\x1e\x1b\x98\xd7\x76\x17\x6d\x3a\x6c\x61\x0b\xc9\x79\xc4\x2d\x1a\xc2\xaa\x68\x89\xdc\xab\x8d\x9c\x80\xc9\x0b\x5f\xe0\x1b\xb6\xc0\x3d\x04\xf4\xf9\xd1\x84\x27\x65\xbb\xe1\x42\x95\xdd\x96\x9b\x95\xaf\x67\xb7\x20\x4c\x61\xb8\x6f\x5e\xa1\x9b\x32\x73\xac\x05\x5b\x3f\x09\xff\x6d\x2d\x02\xd3\xe0\x84\xff\xb6\xdf\x04\xdf\x89\xfc\xeb\xb1\x15\xc2\x97\x0c\x3a\x48\x04\xb1\xb6\xa5\xdc\xe2\xd9\xa7\xf4\x40\x08\x2a\xa8\xff\xeb\x6d\x0e\x6b\x7a\xbb\x2f\x33\xbc\xc1\x28\x03\x0b\x10\x45\x1a\x8c\xf4\x12\xad\x9e\xe2\x6b\x67\xcf\x1c\xaf\x09\x24\xcc\x88\xb7\x12\x30\x76\xc7\x04\x2c\x57\xed\xa0\x41\xf4\x4f\x54\x10\xa4\x7d\x3d\xdb\xa8\xfa\x18\xdd\x60\xe6\x19\x3e\x46\xc7\x32\x3f\xec\x19\xa6\xc7\xa8\xbe\x2b\xef\xa3\x84\x4f\xd3\x04\x44\x7b\xf8\x10\x25\xe0\x66\x36\x3b\x9f\xdf\xb4\xc6\x15\x1e\x0d\x0f\x4b\xd7\x15\x4a\x4e\x96\xe6\xe4\x65\x0a\xf3\x4f\x62\x02\xa6\x52\xd2\xff\xf9\xe9\xd7\x5f\x98\xe1\xc4\xc5\x16\x6f\x4e\x31\xfb\x3a\x9e\x87\x7b\x35\x9c\x5a\xfd\xc4\x77\xad\xe7\x19\xa4\x90\xa6\x77\x20\x46\xb6\xfe\x5e\x5f\x83\x8a\xe0\x23\xa4\x08\xac\x49\x79\x5f\xe3\x62\x6b\x6d\x64\x9a\xf0\x4a\x98\x0d\x1f\x1f\x5b\x4f\xce\x18\x7d\xcb\x47\x1f\x7b\x05\x49\x8d\x3c\xdd\x42\xb6\xc5\x4b\x48\x0e\xdf\x43\xca\x14\x98\x87\x98\x23\x39\x93\xdc\xf3\xe5\xc8\x64\x18\x4b\xfc\xce\xb2\x66\x43\x4d\xf8\x6f\xab\xcd\x72\x69\x25\xea\xc1\x69\x31\x75\x39\xf1\x7f\xd6\x7a\x89\x05\x97\xa8\x07\xa7\xc5\xc1\xe7\xfb\xdc\xf6\x92\x2b\x2a\x51\x0f\x4e\x8b\x8d\xcf\xfb\xd9\xe0\x82\x07\xa4\xe2\xaf\xe6\xf0\xc0\x23\x4a\xf8\xaf\x46\xa1\x84\x0c\x61\x09\x33\xcb\xb4\x31\xdb\xc6\xc3\xe2\x29\x8b\x74\x4d\xf3\x06\x5a\xfb\xf6\xf9\xf7\xf7\xef\xbb\xac\x8a\x39\xc5\x11\xb3\xb7\x51\xe2\x28\x95\xe3\xa9\xff\x08\x29\xe2\x1e\x3b\xf7\xac\xd9\x07\x5c\xa7\xbf\x1c\xf6\x6b\x44\xd8\xdb\x67\x02\xd3\x9d\xf6\x8a\x69\xce\xc1\x37\x38\x47\x91\x6e\xc7\x18\x4d\xa6\x0c\x3e\x9a\x0e\xd1\x2a\x87\xb8\xb0\xbb\xeb\xfc\x31\x20\x28\x7d\x7d\x1f\x50\xc3\x07\xdb\xf8\xa2\x95\x03\xa2\xf5\x3a\xb7\x8f\x8d\xad\x1d\x2a\x2b\x01\xff\xea\xd2\x69\xc8\xbc\xb4\x5c\x5c\x98\x95\x57\x2e\x5c\x09\x86\x8b\xe5\xeb\xe8\x8c\xa2\xf2\x55\x85\x62\x7b\xda\x55\xc6\xac\xa4\xb6\x8f\x64\x90\x42\x3b\x70\x6b\xe2\x25\xa0\xfc\x37\x99\x90\x60\x6b\xd6\x71\xf9\x1a\x4f\x66\x2a\xad\x0b\x4f\x4c\x80\xc6\x1b\xae\x45\xc4\xc1\x08\x4d\x38\x06\xde\xbe\x14\xd3\xb1\xd2\x37\x4a\x65\x47\x14\x1f\xa4\x2c\x69\x01\xf7\xc1\x7d\x9d\xc3\x30\x07\x82\x01\x46\x2d\x22\xe5\x4d\x6a\x9b\xd8\x34\x47\xc5\x96\xde\x31\x7f\xd2\x09\x01\x88\xe4\x55\x03\x5f\xce\x56\xcb\x9b\x95\xcd\x1a\x68\xf7\x0d\x95\xe6\x99\x1b\xd1\x1d\x0b\xb6\xfa\x98\x55\x83\x8a\xc7\x26\xc3\x84\x27\x0f\xf8\x48\x42\x31\x5e\x17\x43\x5c\xb0\xa4\x11\xab\x13\x62\x55\x21\xbe\x38\xed\x86\x27\x26\x20\x3f\x13\xb6\x40\xab\xb2\x8a\xad\xbd\x5a\x03\x61\x7b\x45\xdc\x35\xb7\x59\x79\x5f\xe8\x2c\x1d\x61\x7e\x40\x43\xe5\xd5\xe6\xf8\x7c\x53\x4f\xc2\x83\x10\x9d\x1a\x59\xf1\xc5\xba\x5a\x06\x74\x85\x05\x6d\x2c\x62\xf5\x08\xdd\x11\xc6\xa1\xbe\x8b\x97\x3c\xbe\xe3\x03\xd1\xd5\x3a\x20\x15\x4d\x16\x70\x5d\xdb\xf1\x98\x93\xfe\x9c\x70\x41\xc8\x18\xb2\x46\x39\x4a\x29\xca\xe6\xcf\x9d\x45\x16\x10\xb8\xaa\x6f\x65\x3c\x19\xa2\xfe\x25\xc2\xfe\x29\xbe\x1a\x19\x97\x25\x6d\xc4\xec\x09\x0b\x79\xde\x47\x75\x0a\xc5\x85\x3c\x6e\x57\x40\xda\xdc\x84\xa2\xc1\x35\x41\x70\xd7\x17\x06\xb6\xca\xa0\x30\x2f\xb1\x39\xd9\x43\xa6\xda\x89\x58\x77\xe8\x34\x5e\x75\x3a\xcc\x4f\x59\x23\xd2\x7f\x1a\xb2\x6c\xfb\x6c\x07\x43\x75\xcb\x00\x0c\x82\xbe\xcc\x82\xde\x21\xbd\xc3\x79\xd6\xcb\xa2\x00\xeb\xb4\x7b\x42\x83\x5a\x7e\xcd\x3d\xab\x8d\x31\x3d\x9b\x09\xd7\x21\x13\x5e\x66\x04\x98\xf7\x78\x9e\x04\xd7\xb7\xae\x7b\x3d\x4b\xdc\x44\x52\xd3\x53\x8e\x9e\x8e\xe6\xc6\x42\x43\x4f\x15\xc3\x12\x65\x98\x0c\xdb\x9b\x16\x3e\x92\xb2\xd1\x9e\x56\x85\x9c\xfb\x20\x5e\x0b\xc5\x26\x07\xa1\x8d\xb5\x91\xb3\x4f\x6c\xd1\x59\x2c\xf8\xf2\x65\x1c\x54\xa6\xcc\x78\x20\x82\x8b\x03\x9a\x5b\xea\xac\x92\x33\xb6\x71\x60\x9d\x99\x64\x57\x1e\xc3\x21\xda\xfc\xdb\xab\xa9\x0a\x7a\xde\x49\x85\x38\x4d\x1a\x69\xde\xd5\xe9\x50\xe0\x3f\xda\x2e\x6c\x59\xce\xed\x1d\x53\xac\xe1\x06\x86\xcf\xfa\x84\x0b\x76\xe5\x58\xe8\x66\xf9\x74\x6a\x39\xd2\x53\x33\xc0\x75\x62\xa2\xc8\x9a\x8d\xa6\x2d\xe0\x5b\x11\x44\x85\xbd\x79\x14\x8b\x3b\x69\xb0\x9d\x9d\x45\xa9\x8f\x4c\x40\x4f\xd8\x7b\xe3\x70\x4e\x84\x26\xae\x3a\x73\x5b\xc2\x3f\x4c\xe4\xdf\x56\x9f\x15\xd9\x96\x01\x2d\x38\x94\x8e\x4f\xd2\x3c\x69\x79\xb1\x8a\xe1\x6a\xdf\xc5\xe1\x25\xfb\x6d\xbf\xc1\x75\x9d\xb0\x1f\x3d\x78\xad\x69\xc2\x7f\xdd\xac\x59\x9b\xc9\xf2\x87\x95\xac\x17\x2a\x78\x82\xf3\x31\x92\xc0\x22\x1b\x05\x22\x11\xd6\xaa\x37\x39\xf3\xea\xb5\xca\xe1\x29\x6f\x12\x5a\x20\x92\xa1\xbc\x7a\xad\x29\x24\xcd\x4b\x55\xe6\x02\x69\xeb\x60\xc1\x2c\x7b\x7f\x44\x05\xfd\xd0\xd2\x6f\xf8\x43\xc7\x09\x7f\xd1\xa7\x57\xf1\xb9\x44\xc7\x95\x98\x63\x0e\xe1\x68\x1e\x81\xb8\x46\x1c\xb3\x89\x71\xd0\xf9\xa8\x4e\xc4\xd6\x2d\xbd\x6d\x89\x57\x5e\x2b\xdf\x70\xb1\x45\xf4\x96\xa0\x3f\x0e\xc8\xdc\x90\x2a\x48\xef\x26\x00\x6f\x9a\x4c\x02\x48\x61\x9e\xaf\x61\xba\xb3\xd9\x7b\xb8\x63\x12\x29\xd0\x3d\xf8\xaf\x8f\x1f\x7e\xa2\xb4\xfa\x5d\x60\xd3\xc9\x3e\xdc\x91\x69\x59\x10\x04\xb3\x53\x4d\x21\x45\xe9\x1d\x2c\xb6\x41\xe7\x1f\x48\x33\xc5\x7a\xf1\x3e\x9f\x28\x0f\x6d\x16\xe0\xdf\x43\x9e\x04\x03\x65\x98\x0f\x35\x03\xfb\x66\x36\x03\x7f\xf9\x8b\x97\x63\xfd\x9f\x6a\x8f\xb5\xb4\x95\xa0\x59\x57\x65\x51\xa3\xcf\xe8\x81\x8e\x27\x9c\xf9\x2d\xa2\xbf\xcb\xaf\x3f\x21\x98\x21\x12\x47\x1f\x60\x4d\xdf\x7d\x94\xe2\x89\xc6\xe3\xe1\xe9\xe9\xb3\x25\x98\x0a\x15\x71\xf4\xcf\xf7\x9f\xa3\x09\x10\x62\xa7\xe4\x80\xac\x18\xa2\x9d\x09\xee\x01\x3a\xce\x00\x17\x00\x63\x92\xcb\x5e\xf1\xf8\xf3\xa6\xe1\xf0\xdd\x27\x5c\xa4\x2c\xb6\x6c\x31\x79\x0d\x8d\x40\x54\x34\xbe\x81\x96\x88\xad\xca\xba\x43\x57\xca\xf5\x97\xff\xb3\x4a\xf2\xdc\xc9\xff\xed\xd7\x4f\xc1\xd9\xf7\xcf\xec\x0f\x65\x41\x51\x41\xdf\x7d\x3e\x55\x3c\x61\x00\xab\x2a\xc7\x29\x64\x62\xba\xfe\x52\x97\x45\xe4\x60\x28\xb2\xd8\xca\x67\x97\xeb\x2f\x63\x77\x96\xc5\x06\x71\x2b\x2b\x3c\xbc\xb2\xd7\x6c\x46\x1c\xc1\x0a\x5f\xf3\x9d\xf9\x5a\xd9\xd5\x89\xee\x17\xf8\xf3\xa6\x2d\x5e\xbe\x91\x35\x1a\xe9\x99\x60\x82\xe8\x32\xe2\xe5\x36\x75\xb4\x62\x13\x57\x1c\xf2\xdc\x37\x5b\x2e\x51\xe6\x98\xb2\xde\x19\xa4\xd0\x8e\x52\xfc\x3d\x9c\x13\x0c\xf5\xe8\x76\x96\xee\x5e\x9b\x0f\x9d\x0e\x89\xd2\x34\xd2\x5a\x4f\xb8\xae\x63\x8d\xd3\x5e\x75\x62\xff\xda\xed\x23\x6e\x76\xb4\x71\x48\xe9\xda\xdd\xc7\x99\x67\xb9\x20\x06\xce\xb4\xda\x77\xcd\x39\xf6\xe6\xb2\x5f\x7b\x8e\x1b\x77\x61\xf0\x1c\x07\x0e\xc5\xc2\x73\x6c\xc8\x58\x8e\x3c\x7c\x8a\x11\x16\x72\xeb\xc6\x0e\x93\xb2\x72\x60\x26\x9e\xb0\xe9\xeb\x48\x59\x53\x4e\x31\x86\x1e\xfd\xec\xe3\x73\xb0\x98\xd5\xd0\x9f\x24\xe6\x8a\xa0\xe3\x53\x55\xf8\x7b\xc8\x61\x17\xac\x2f\xb3\xa0\x91\x67\xc3\xcb\xe1\xe9\xb6\x82\x87\xba\x33\x4f\x59\x8b\x8d\x07\x88\xf2\x3c\xad\x42\xc0\x55\x3d\xe1\x6d\x8a\x64\x71\x4d\xcb\xaa\x62\x9e\x83\x19\x54\x08\xae\xc0\x42\xa1\x5d\x08\xff\x35\x02\xdf\x83\x88\xb3\x12\x81\x44\x7e\x9a\x0f\x1e\x63\x74\x25\x1e\xfc\xc3\x2c\xd0\x43\x30\xfa\xe9\xc3\xcc\xfa\x06\xa4\x47\xcb\xed\x36\x47\xb7\x04\x55\x08\x06\xf1\xeb\x3e\x85\x6d\x61\x1e\x23\xd1\x37\x4a\xc0\x5b\x57\x96\x4b\xd5\xba\x3a\x8f\x43\xa4\x61\x91\x95\xfb\x0b\x49\xf3\xbe\x41\xd2\xa2\xd5\x43\x9a\xcd\x8c\x4e\xf1\x40\xf0\xab\x39\x43\x5d\xbe\x44\xbb\x2f\x47\x5f\xd1\xa5\x30\xd6\xec\x63\x24\x94\x24\x4a\xe4\x09\x8d\x75\x9e\x11\xb1\x88\x32\x4a\x2c\x73\xa3\x42\x4d\x3b\x95\x04\xa2\x03\xc1\x51\x02\x0e\x04\x07\x2c\x83\xc7\x99\x11\x95\x06\xba\xd8\x8a\xc3\x3e\xac\x04\xd7\xb6\x16\x34\x95\x0a\xc5\x61\xef\xce\x35\x2e\x70\x67\xda\x80\x05\x93\x38\xec\x46\x01\x61\x37\x25\xbd\xa9\xe6\x78\x79\xd2\xef\x36\x14\xdf\xb6\xfb\xe1\xa4\x39\xb5\x01\x75\x8b\xcb\x43\xde\xb1\x9d\xee\xa5\x9f\xf1\x1e\x95\x07\x1a\xcb\x41\x4c\xc0\xcd\x6c\x36\xf3\xe7\x26\x34\x64\x22\x98\xd6\xc0\x64\xf7\xd8\x63\xb5\x39\x6c\x57\x16\x34\x2b\xd3\xc3\x1e\x15\x54\x77\xf0\xdf\x2e\x16\x60\x94\x97\x30\xc3\xc5\x76\xe4\xec\x72\x05\xee\x4f\x83\x36\x58\xed\xc0\x3e\x1e\xfd\xf8\xeb\x47\xb9\x0a\x3e\x94\x30\x43\xd9\x68\xc2\x51\x06\x03\x68\x27\xcb\x62\xa3\x4c\x9c\x2f\x13\x8f\xd8\x12\xed\x59\xcf\xb0\x34\xfa\x90\xe8\x2f\x2e\x04\xd7\x85\xc4\x7c\x75\xa0\x9a\x8a\x02\xf3\xbd\x85\x63\x1b\x61\xc2\x7f\xb5\x6f\xcd\x0e\x98\x68\xcf\x6d\x3b\x33\xff\x09\xff\x35\xfb\x08\xe8\xf6\x9b\xb1\x17\x4c\xac\x57\x07\x8a\x1b\xd7\x89\xf5\xda\xae\x2c\xbe\x26\x13\xf9\x57\xaf\xdd\x84\xbc\x7c\x8b\xfd\xf1\x14\x2e\x1c\x31\xba\x9f\x72\xef\x27\x98\x61\xba\xc3\x59\xe7\x4e\xcf\x1a\x1b\xed\xd9\x22\xfa\x3e\x47\xec\xf1\x1f\xa7\x9f\xb3\x58\x38\x56\xba\xe6\xa3\x29\xcf\x9e\x13\x54\x2c\x6f\x56\x53\x8a\x1e\xa8\xd4\x2d\x2b\x5f\x88\xa6\x19\xae\xe5\xb6\x11\x15\x65\xa1\xb2\xbe\x5a\x5d\xee\x5d\x79\x6f\x9c\xec\xa2\x3a\x25\xb8\x62\xcf\xaf\xc7\x62\xb8\xed\x0a\x68\x0c\x04\xc6\xb1\xce\xcb\x74\xa7\x0d\x52\x33\x28\x7f\x9d\xcd\x66\x13\x2e\xeb\xee\x6a\x3c\x06\x91\xf0\x5f\x6d\x8e\xef\xca\xfb\x84\xff\xaa\x12\x34\x6b\x82\xf7\x10\x17\xa1\xba\x3b\x66\x35\x6e\x85\xd6\xdc\x36\x25\x4b\xc1\xc9\x4e\xbb\x24\xa9\x6e\x72\x48\x74\xd1\xb8\x15\x96\x7e\xd2\x94\x4e\xf7\xf0\xc1\xcc\x93\x0b\xc2\x4b\xb5\xb3\xac\x96\xbc\xe8\x6d\x15\x3c\x46\x70\xe1\x79\xc9\x9c\x93\xf4\x4b\xa7\x3c\xcd\xdd\x35\x07\x5e\x6b\xe8\xe9\xa7\xe9\x20\x70\x4e\x86\xda\x1d\xc6\x31\x9f\x51\xbb\x73\x7a\xa5\x7a\x99\x34\xa7\xfc\xd8\x75\xe1\xf3\xc2\x94\x4c\x04\x83\xe3\x61\x1c\x6e\xf0\x36\x9a\x78\x74\x61\x3c\x1f\xb4\xaf\x5f\x38\x08\x0f\x2b\xdc\xa3\x0b\xc9\xca\x1a\x89\xc0\x19\xf3\xf4\xd3\xcf\x05\x8d\xe9\x1d\xae\x85\x60\xf4\xdc\x93\x7e\x74\xe0\x0e\xd0\x3a\x9e\x76\x4d\x20\xf8\x1f\xbf\xed\x8e\x63\x6d\x96\x6c\xab\xf8\x24\x53\xc8\xec\x84\x69\x09\x3b\x97\x8f\x96\xb6\x7f\xd6\x26\x31\x80\xac\x77\x07\xb8\xc3\x59\x86\x8a\x10\x59\x69\x3a\x7b\xa8\xda\xa4\x42\xb4\xdc\x4a\xa2\x67\x0d\xd1\x29\x3b\xe2\x34\x72\xbe\xc3\xb4\x7d\xeb\x7f\x9c\x7e\xc8\x61\x5d\xff\x02\xf7\x28\x8e\x32\x44\x21\xce\xa3\xb1\x61\x4c\x45\xa8\x7a\xcf\xbb\x36\xd4\x53\x82\x20\x45\x3f\xca\xd7\xff\x20\x70\xcb\xfe\xda\x15\x25\x39\xd6\x45\x1e\xa2\x4a\x79\xf5\x15\x23\x6a\x6d\x85\x6e\x9e\x50\x95\x6a\xad\x86\xe0\x85\xf2\xe2\xd3\x30\xc4\xea\x42\x52\x8b\xf9\x90\x4f\x71\x51\x20\xf2\xd3\xe7\x8f\x1f\x7c\x67\x8d\xb2\x84\xcb\x45\xe6\x4b\x02\xa9\xbb\x4c\x82\x7f\xf0\xe7\x9f\xc0\xbc\xfd\xe5\xcd\x58\x36\x67\xc4\x81\xc8\x0b\xf0\x53\x27\x77\x5e\xa4\x38\xe2\x28\xc7\x76\x84\x91\x63\x4b\x16\xe2\x5a\x12\x8b\x15\xc1\x95\x4f\x30\xee\x7d\x3d\xae\x0c\x53\x58\x55\xa8\xc8\x7e\xe0\xf5\x0c\x39\xf6\x06\x28\x16\x14\xef\x67\x9d\xc7\x75\x6e\x1a\x4d\x5e\x5b\x2c\x8d\x50\x9d\xb1\xed\x9c\x80\x80\x13\x23\x16\x73\x22\xff\xda\x8e\xba\x79\x44\xab\x1f\x90\x72\x07\xc7\xad\xbc\x7d\x7c\x19\x8b\xc8\x4f\x48\xbf\xbe\x45\x1c\x40\xf6\x15\x2c\xa2\xa0\xfa\x72\x16\x31\xaf\xc5\x6a\xd6\xf2\x18\xec\xc7\xce\x61\xa8\x4b\x64\x79\x1d\xaa\x29\xc9\xeb\xe5\xbf\x59\x2d\x83\x6d\x9e\xd9\xcd\xec\x13\x10\x80\xe6\xa2\xd8\x85\x3b\x83\xec\x4f\xf0\x7c\x9a\x8f\xd4\x3d\x98\x06\x0b\xb0\x87\x3b\x16\x7c\xd6\xf4\x16\x53\xb4\x17\x57\x94\xf8\x6d\xbf\xbc\x66\x5c\xb0\x3f\xdf\xd8\x19\xe6\x1c\x7b\xbc\x86\x34\xc7\xe9\x6e\xd4\xe1\x3f\x01\x69\xf2\xde\xaa\xb5\xa3\x2e\x59\x4f\x85\xf2\xc4\xde\xdb\x5a\x40\x98\x03\xa7\x03\xb2\x73\x28\xea\x9f\xd0\xb5\x21\x47\x36\x3c\x23\xc5\x9c\x36\xb0\x00\xdc\x83\xdb\x22\xfa\x77\x4a\x09\x5e\x1f\x28\x8a\xa3\x1d\x3a\x45\x76\xd2\x4b\x4d\x01\xc1\xfe\x3e\x07\xe2\x58\x56\x35\x6c\xa1\x51\xb2\x4c\x69\xd8\x39\x14\x1b\xab\xac\xd7\xf4\x8f\x55\xb7\x42\xea\x60\xc0\x77\x5a\x15\xba\xd8\x06\x4c\x5b\xcb\x96\x1d\xcf\x90\xf6\x9e\x9f\x4e\xc4\x1d\xb0\xf1\x85\x3b\xc0\x13\xd6\x41\xef\x56\x01\x89\xa5\xc3\x81\xeb\xdf\xdc\xb8\x38\x86\x62\xf8\x2e\x29\x22\x11\x51\x70\xa2\xaf\xb9\x1c\x4f\x6b\x43\x07\x52\xe6\x6a\x44\x8a\x60\x07\x20\x53\xb0\x50\x6d\x63\x57\x3f\xa6\x64\x13\x71\x33\x5d\x96\xc6\x5b\xd5\x09\xb2\xae\x6e\x21\x0b\xd7\xdd\xf8\x40\x8e\xe2\xdb\xba\x82\x05\xe0\xfc\x2e\x28\x81\xe9\xee\xbb\xe8\xca\x65\xc7\x28\xcb\x1f\x5f\x45\xdf\x5e\xb3\x6e\xdf\x45\x57\x5e\x75\x32\x91\x32\xaf\x26\x80\x54\x78\x77\x2d\xba\xb9\xe3\x1b\x79\x7a\x35\x4e\x91\x79\x07\xb4\x69\xd6\x2f\xb6\x7b\xed\x0f\x1f\xfa\x95\x35\x76\xe1\x11\xfa\xf9\x54\xd8\x42\x8c\xba\xb7\xb4\x3c\x48\xf8\x2c\xf1\xda\x51\xbd\xd1\xf5\xaa\x1a\xd0\xe1\xbc\xcb\xff\xb6\xe2\xbb\xee\x59\x71\xa7\x46\x54\x3b\xde\xd6\xa8\x82\x04\xd2\x92\x7c\x77\x3d\x68\x7c\x5e\x1e\x04\x2e\xbf\xfc\x3e\xf0\x36\xbf\xfc\xb4\x5b\xbf\xad\xca\x8a\x0b\x19\x7e\x9d\xb5\x09\x33\x83\xe7\x27\xcb\xef\x80\x84\xb5\xcb\xaf\x06\x8c\x72\x40\x0b\x04\x53\x17\xe0\xeb\xd4\x2d\x5d\x5d\x3b\x04\xe4\x5f\xbe\x7e\xc3\xe1\x33\xb7\x39\x36\x3c\x06\xfe\x3c\xb7\x9d\x33\xe5\x62\x0c\x71\xc1\xdb\x03\x71\xc3\x05\x67\x26\xb2\x24\x18\x15\x14\xca\x53\xd3\x60\x52\xa3\x71\x02\x44\x32\x24\xe8\x02\xd8\xbb\xf9\xd9\xc0\xb2\x87\x34\xbd\xfb\x88\x32\x0c\xe3\x28\xd6\x28\x27\xa0\x2a\x09\x25\x10\xd3\x71\x34\x9e\x72\x28\xe4\xb8\x3f\xb6\x13\xe1\x15\x36\xf3\xe1\x3d\x15\x7b\xfc\xf7\x1e\x17\x59\x79\x3f\x1d\xc6\x04\xcc\xb2\x46\x7e\x1a\x90\x44\xdd\x8b\x2a\x87\x45\x56\xa7\xb0\x42\xfd\xb8\xfe\xf7\x04\x4f\x4d\xd6\xd7\x1b\x3e\xf5\x1d\xe7\x31\xe6\x6e\x9b\x13\xc5\xa0\x4b\xa1\x81\xe9\xdb\xb9\xf6\x79\x9a\xde\xa1\x74\xc7\x8b\x22\x9c\x4c\xaf\x4c\xf5\x4d\x19\xb8\xbf\xf3\x85\xa9\xc4\x30\x19\xe5\x59\x4a\xae\x9c\x23\xc5\xd0\xad\x06\x6b\xee\xad\x62\x99\x0d\xde\x46\x81\xdc\xa4\x70\xa1\x1e\x06\xc8\xb2\x85\xd2\x71\xb5\x5f\xa7\xca\x9d\xfe\xc4\x8f\xa0\xdd\xc4\xb9\x1a\xe7\x1e\x3e\xf8\x11\xbc\xa8\x34\x45\xb6\xdf\x97\xa5\x7d\x5d\xa1\xfe\x7f\x4a\x37\xf3\x89\xe7\x2b\xa5\x30\x06\x11\x7e\x85\x24\x86\xa2\x3b\x24\x8d\xf1\xa2\xf6\xd6\xb1\xab\x7b\x54\x1c\x2e\xb1\xaa\xcd\xd0\xd6\x65\x76\xba\x24\xc4\xd7\x19\xe0\x41\xfa\x6d\x7d\x58\xc7\x5d\x66\x47\x70\x1a\x36\x38\xa8\x38\x18\xa6\x86\x21\x0e\x25\x76\xd7\x30\xdd\x89\xb4\xee\x00\xd6\xbd\x37\x71\xde\x1a\x01\x75\x57\x5a\xc2\xae\xc9\xb3\x6d\x46\x30\xe4\x76\x2b\x4d\x3d\x89\xe2\xbe\x10\xe3\xad\xeb\x2f\x8c\x42\xfe\xc2\x28\xe8\x00\x19\x33\x06\xb1\x3f\xad\xd2\x35\x90\xb6\xa7\xed\x26\xb9\x6c\xbb\xfe\x9e\xcf\xce\xf6\x65\x33\x0c\x10\x1f\x51\xb6\xd4\xcb\xea\x37\x52\x56\x70\x0b\x85\x8e\xfa\xb5\xaf\x53\x93\xc4\xa1\xc9\xb3\x34\xe9\xc5\x67\x48\xa9\xe4\xd3\x67\x28\x28\x2c\x67\x86\x9e\xaa\x99\x4f\x5e\x33\x7d\xf3\x7b\xb1\xce\x04\xb5\xf0\x65\x14\xa2\x46\x94\xe2\x62\x5b\x3f\x4f\x29\x6c\xf3\x98\xa1\x42\x18\xc8\xce\x95\xc9\x80\xb9\xc3\x69\xd9\x52\x30\x68\x75\x86\x2c\xb1\x2b\xed\xc1\x92\xe2\xae\xc1\x61\xdd\x67\xbb\x25\x88\xe1\x74\x8b\x4f\x41\x31\x13\xc4\x1c\xa0\xc1\x42\x76\x12\xda\xa5\xa8\x8f\x9c\x0a\x3c\x21\xfe\xfb\xb8\x50\x1b\xf9\x85\x5c\xf4\x9a\xd4\xde\x15\x6d\xe9\xbd\x13\x83\xba\x19\x50\xa5\x1f\x17\x3b\x4d\x9e\xc9\x7a\x9a\xbb\xf6\x15\xa8\xeb\x5e\xd4\xdc\x72\xda\xba\xc8\xf7\x39\x6e\x0d\xf5\x1e\xcf\x6d\x40\x78\x2d\xea\x2d\x0d\xe7\xda\xeb\xea\x31\x76\x93\xe6\xc9\x74\xf9\x44\x9b\x7a\xb2\x5d\xbf\xa6\x55\x3e\x07\x5c\x40\x55\xfe\x72\x69\x70\xad\xf5\xef\x2d\xb1\x31\xea\x4b\xe5\xb7\xe0\xe2\xe2\xf5\xfd\x17\x5b\x51\xfd\xb0\x82\xa0\xe3\xc5\xc6\xbe\x9f\xcd\x1c\x9e\x5e\x86\xcd\xa6\x4c\xf3\xf5\x98\xe5\x55\xff\x2f\xc1\x2c\x43\x74\x31\x9b\xba\xda\xdc\xca\x73\xf1\xfe\xf2\x2c\xfb\xc0\xd9\x68\xe8\xd8\x28\xf8\x5d\x83\x97\x18\xb3\x51\xfc\xfa\xec\x39\xea\x61\x5b\xdc\x53\x78\x49\xb6\x39\xc6\x8b\xd8\x76\x2f\x46\x75\x25\x6c\x7d\x05\x7f\xe2\xf2\xcc\xaa\xbd\x15\x63\xf3\x3b\xc0\x74\x0c\x58\x81\xfa\x69\x60\x4d\x52\xb6\x15\x5c\xc3\xba\x46\xb4\xbe\xe6\x0b\x6b\x5a\x1f\xb7\x7d\x49\xf3\xd7\xe7\x24\x87\x27\x9b\x11\x63\x69\xb4\x97\x20\x9f\xbe\x28\x42\x13\xa0\xae\xdc\x38\xd5\xa7\x82\xd6\xa0\xe5\x63\x8c\x89\xef\x7f\x65\x05\x53\x4c\x4f\x8b\x9b\xe9\xac\x47\xaa\x2f\x43\x67\x36\xfd\x6b\x28\xc1\xdf\x75\xd9\xe7\xc9\x83\xd6\x16\xdf\xab\x0e\x7a\x10\x1d\xcf\xa0\xcf\x17\xf9\x17\x03\x4b\x80\xbb\xd3\xfd\xde\x74\xbd\xe5\x52\xc8\x93\xc6\x60\xb9\x7e\x7f\x59\x4e\x06\x29\x74\x92\xec\x8c\x3f\x53\xd3\x47\xdc\xae\x8c\x00\x2e\x80\xfd\x9f\xa6\x29\x4c\x2d\x2f\x4d\x76\x97\x81\x2e\xf9\x81\xf7\xad\x6c\x8d\x56\xe0\x5f\xed\x6b\x32\xee\x6a\x94\xc0\x2e\x88\x7d\x61\xd2\xa2\x64\x34\x77\x91\x92\x52\x29\xd0\x3d\xf8\xd1\x13\xf2\xf2\x7c\xb0\xe0\xbd\xcf\x9c\x6a\xda\x07\xae\x16\x1c\x31\xd3\xc2\xcf\x98\x5f\x72\x7e\x67\x72\xdc\x11\xe9\xb5\x83\x6f\xc6\xa4\x3e\x5d\x87\x46\xb1\xe7\x85\xfc\x1e\xf8\xbf\xcd\xc6\x0e\x70\x8d\x98\x6d\x54\x30\xff\x02\xfe\x36\xf3\x48\x77\x8d\x72\xb0\xe0\x78\xaf\xc0\x28\x19\x81\x2b\x10\x47\xb3\x08\x5c\xb1\xde\xe3\x69\x9d\xe3\x14\xc5\xef\xbe\x71\x91\x53\xf4\x40\x6b\xbf\x19\x35\x17\xa2\x52\x03\xcf\x68\xb0\xf9\xa9\x2d\x94\xe2\xc8\x43\x95\x4b\xbc\x71\x89\xcd\xb2\xd1\xb7\x0b\x31\x96\x50\x49\x8f\xb7\x93\xec\xd3\x5b\x67\xf3\x74\x0b\x11\x58\xf1\x9d\x7d\xf8\x95\xb3\x80\x89\x30\x2d\x83\x13\x67\xa8\x92\xac\xae\x4b\x3c\xfd\x39\xf5\x60\x62\xc4\x93\xa1\x0f\x5b\x98\xae\x94\x47\xf8\x52\x8b\xf7\xf8\xd2\x4e\xbd\x9f\x9d\xff\x17\x67\xca\x4d\x31\x43\xff\xdf\x01\x00\x00\xff\xff\x9c\x75\x2b\x8b\xea\x64\x00\x00")

func assetsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppJs,
		"assets/app.js",
	)
}

func assetsAppJs() (*asset, error) {
	bytes, err := assetsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.js", size: 25834, mode: os.FileMode(436), modTime: time.Unix(1490874195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBackSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\xcd\x6a\x03\x21\x14\x85\xf7\x3e\xc5\xe1\x76\x9b\xc6\xe3\x4c\x21\x50\xd4\x45\xf7\x7d\x88\x42\xac\x4a\xa7\x63\x88\xa2\xa1\x4f\x5f\x26\x0c\xc3\xe5\x9e\x9f\x6f\x71\x6c\xed\x11\x8f\xdf\x65\xad\x4e\x52\x6b\xb7\x77\xad\xc7\x18\xe7\x31\x9f\xcb\x3d\xea\x89\xa4\xae\x3d\x0a\x46\xbe\xb6\xe4\x64\x22\x05\x29\xe4\x98\xda\x5e\x7a\x0e\xe3\xa3\x3c\x9c\x10\xc4\xc4\xe7\x8b\x57\x36\xa2\xb6\x7b\xf9\x09\x4e\x5e\xde\xb8\x9d\xec\xe0\xf5\x98\x12\x7c\xe7\x65\x71\xb2\x96\x35\x88\x57\x00\x60\x6f\x5f\x2d\xe1\xea\xe4\x13\x33\x4f\x86\x84\x21\x4f\x33\x61\x2e\x87\x99\x0b\xf1\xc4\x5b\xf8\x13\xed\x95\xd5\x71\x93\xda\xa3\x57\xff\x01\x00\x00\xff\xff\xc0\x07\xee\x15\xd1\x00\x00\x00")

func assetsBackSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsBackSvg,
		"assets/back.svg",
	)
}

func assetsBackSvg() (*asset, error) {
	bytes, err := assetsBackSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/back.svg", size: 209, mode: os.FileMode(436), modTime: time.Unix(1490861399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsMainSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xc1\x4a\xc4\x30\x18\x84\xef\x79\x8a\xe1\xf7\xba\x6e\xa6\xad\xb0\x20\x49\x0e\xde\x7d\x08\x61\x63\x12\xac\x4d\x69\x42\x52\x7c\x7a\xa9\x14\x97\x61\xe6\x63\xe6\x30\xa6\xb4\x80\xfd\x7b\x5e\x8a\x95\x58\xeb\xfa\xaa\x75\xef\xfd\xda\xa7\x6b\xde\x82\x1e\x49\xea\xd2\x82\xa0\xa7\x7b\x8d\x56\x46\x52\x10\x7d\x0a\xb1\x9e\xa5\x25\xdf\xdf\xf2\x6e\x85\x20\x46\xfe\x59\x9c\x32\x01\xa5\x6e\xf9\xcb\x5b\x79\x7a\xe1\x21\x39\x87\xe7\xff\x2b\xc1\x67\x9a\x67\x2b\x4b\x5e\xbc\x38\x05\x00\x66\xfd\xa8\x11\x77\x2b\xef\x18\xc8\xcb\x44\x0c\x37\x5e\x06\x9e\xbc\x11\xd3\x03\x24\x7e\x44\x3b\x65\x74\x38\xa2\xb4\xe0\xd4\x6f\x00\x00\x00\xff\xff\xd3\xed\x09\x4f\xd0\x00\x00\x00")

func assetsMainSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainSvg,
		"assets/main.svg",
	)
}

func assetsMainSvg() (*asset, error) {
	bytes, err := assetsMainSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.svg", size: 208, mode: os.FileMode(436), modTime: time.Unix(1490861491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsNextSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x6a\x84\x30\x10\x06\xe0\xbb\x4f\xf1\x33\xbd\x5a\x33\x49\x55\xb0\x24\x1e\x7a\xef\x43\x14\xb4\x49\xa8\x5d\xc5\x84\x44\xf6\xe9\x17\x57\x61\x17\x96\x61\x06\xfe\xe1\xe3\xd7\x21\x59\x6c\xff\xd3\x25\x18\x72\x31\x2e\x9f\x42\xe4\x9c\xab\xfc\x51\xcd\xab\x15\x8a\x99\x45\x48\x96\x90\xfd\x10\x9d\x21\xc5\x4c\x70\xa3\xb7\x2e\x9e\x21\xf9\x31\x7f\xcd\x9b\x21\x06\x43\xf1\x7d\xa9\x2f\xb4\x45\x88\xeb\xfc\x37\x1a\x7a\xab\x79\x1f\x3a\x1f\xef\x67\x95\x54\x84\x5f\x3f\x4d\x0f\xd0\x17\x00\xa0\x97\x9f\xe8\x30\x18\xfa\x46\xdd\x94\x2d\x43\xca\xa6\x94\xcc\x7b\x92\x35\xe3\x4a\xe2\x05\x76\x07\x6c\x0f\xd8\x3d\x41\x2d\xec\x7e\x42\xb2\x7d\x71\x0b\x00\x00\xff\xff\x22\xf8\x97\x68\xec\x00\x00\x00")

func assetsNextSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsNextSvg,
		"assets/next.svg",
	)
}

func assetsNextSvg() (*asset, error) {
	bytes, err := assetsNextSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/next.svg", size: 236, mode: os.FileMode(436), modTime: time.Unix(1490506165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPauseSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xe1\x4a\x03\x31\x10\x84\xff\xdf\x53\x0c\xeb\xdf\xda\xec\xc6\xd6\x2b\x72\x39\xd0\xff\x3e\x84\xd0\x73\x73\x78\xde\x95\x26\x24\xc5\xa7\x97\x94\xd4\x62\x95\x90\x5d\x32\x7c\x99\x99\x2e\x24\xc5\xe9\x73\x9a\x83\x23\x1f\xe3\xe1\xc9\x98\x9c\xf3\x3a\x3f\xac\x97\xa3\x1a\xcb\xcc\x26\x24\x25\xe4\x71\x1f\xbd\x23\xcb\x4c\xf0\xc3\xa8\x3e\xd6\x47\x1a\x87\xfc\xb2\x9c\x1c\x31\x18\x96\xcf\x97\xfa\xa6\x53\x84\x78\x5c\x3e\x06\x47\x77\x1b\x2e\x87\xaa\x70\x5f\xad\xc4\x12\xde\xc7\x69\xba\x02\x7d\x03\x00\xdd\xe1\x2d\x7a\xec\x1d\xbd\xa2\xdd\xae\x1e\x19\xbb\xcb\x94\x0d\x17\xa9\xac\x2f\x32\x7f\x68\xb1\x67\x50\xe4\x67\x15\xb2\xa8\xbf\x7f\xe8\x4d\x91\xdd\xa5\xc7\xbc\xcc\x43\x2d\x71\x63\x5d\x3c\x98\xf1\x5c\xe2\xdb\x2d\x18\xb2\x12\x48\xfb\x9f\x5a\xd1\x6b\x9c\xd1\xbe\xa9\x23\x24\xed\x9b\xef\x00\x00\x00\xff\xff\x0a\xc1\xa7\x81\x72\x01\x00\x00")

func assetsPauseSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsPauseSvg,
		"assets/pause.svg",
	)
}

func assetsPauseSvg() (*asset, error) {
	bytes, err := assetsPauseSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pause.svg", size: 370, mode: os.FileMode(436), modTime: time.Unix(1490523630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPlaySvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\xd1\x4a\xc3\x40\x10\x45\xdf\xf3\x15\x97\xf1\x35\x76\xef\xae\x89\x11\xc9\x06\xf4\xdd\x8f\x10\x1a\x67\x83\x31\x29\xdd\x25\x5b\xfc\x7a\x69\x59\x29\x94\x32\xcc\xc0\xbd\x1c\xce\xf4\x71\x53\x9c\x7e\xe6\x25\x7a\x09\x29\x1d\x5e\x8d\xc9\x39\xef\xf2\xd3\x6e\x3d\xaa\x71\x24\x4d\xdc\x54\x90\xa7\x7d\x0a\x5e\x1c\x29\x08\xe3\xa4\x21\x95\xb0\x4d\x63\x7e\x5f\x4f\x5e\x08\xc2\xf1\xb2\x32\x54\xbd\x22\xa6\xe3\xfa\x3d\x7a\x79\x68\x78\x1e\x29\xc5\x63\x51\x59\x27\xf8\x9a\xe6\xf9\x0a\x0c\x15\x00\xf4\x87\xcf\x14\xb0\xf7\xf2\x81\x8e\xf5\x33\x61\x1b\xd6\x96\x3c\x27\xdb\x10\xbf\x62\x0a\xa8\x37\xc6\x97\x7f\xe1\xb2\x2e\x63\xb1\xdd\x18\x5d\x7b\x51\xbd\xa1\x6b\xeb\xae\x05\x61\x6b\x0b\xdb\xdd\x6b\x0b\x7a\x7d\x67\x74\xa8\xca\x89\x9b\x0e\xd5\x5f\x00\x00\x00\xff\xff\x74\x48\x45\x6f\x3b\x01\x00\x00")

func assetsPlaySvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlaySvg,
		"assets/play.svg",
	)
}

func assetsPlaySvg() (*asset, error) {
	bytes, err := assetsPlaySvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/play.svg", size: 315, mode: os.FileMode(436), modTime: time.Unix(1490506353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPrevSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xc1\x6a\x84\x30\x10\x06\xe0\xbb\x4f\x31\x4c\xaf\xd6\xfc\x89\x5a\x4a\x49\x3c\xf4\xde\x87\x28\x68\x93\x50\x77\x15\x13\x12\xd9\xa7\x5f\x94\xc0\x2e\x2c\xc3\x0c\xfc\xc3\xc7\xaf\x43\xb2\xb4\x5f\xe6\x6b\x30\xec\x62\x5c\xbf\x84\xc8\x39\x37\xb9\x6d\x96\xcd\x0a\x05\x40\x84\x64\x99\xb2\x1f\xa3\x33\xac\x00\x26\x37\x79\xeb\x62\x09\xc9\x4f\xf9\x7b\xd9\x0d\x83\x40\x0a\xe7\xf2\x50\x69\x4b\x21\x6e\xcb\xff\x64\xf8\xad\xc3\x31\x5c\x1e\xef\xa5\x4a\x2a\xa6\x3f\x3f\xcf\x0f\x30\x54\x44\x44\x7a\xfd\x8d\x8e\x46\xc3\x3f\x24\xfb\xbe\xfe\x00\x7d\xf6\xb5\x04\xce\x24\x3b\xd0\x8d\xc5\xab\xc4\x29\xdb\x22\xf1\x24\xb5\xb0\xc7\x09\xc9\x0e\xd5\x3d\x00\x00\xff\xff\x27\x39\x48\xbf\xee\x00\x00\x00")

func assetsPrevSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsPrevSvg,
		"assets/prev.svg",
	)
}

func assetsPrevSvg() (*asset, error) {
	bytes, err := assetsPrevSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/prev.svg", size: 238, mode: os.FileMode(436), modTime: time.Unix(1490506308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRandomSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xd1\x6a\xc3\x20\x18\x85\xef\xf3\x14\x87\x7f\xb7\x59\xfd\x75\x9a\x95\x11\x03\xdb\xfd\x1e\x62\xd0\x4c\xc3\xb2\xa4\x54\x89\x65\x4f\x3f\x6c\x2c\xdd\x42\x11\x85\xff\xf8\x9d\x73\xb4\x0d\x8b\xc3\xf9\x7b\x9c\x82\x25\x1f\xe3\xf1\x45\x88\x94\xd2\x2e\x3d\xed\xe6\x93\x13\x8a\x99\x45\x58\x1c\x21\x0d\x87\xe8\x2d\x29\x66\x82\xef\x07\xe7\x63\x19\x96\xa1\x4f\x6f\xf3\xd9\x12\x83\xa1\xf8\xb2\xa9\xab\x5a\x87\x10\x4f\xf3\x57\x6f\xe9\x41\x73\x5e\x54\x84\xc7\x12\x25\x15\xe1\x73\x18\xc7\x1b\xd0\x55\x00\xd0\x1e\x3f\xa2\xc7\xc1\xd2\x3b\xa4\x31\xb5\x32\x90\x7b\x53\x6b\xbe\x4c\xc6\xe0\x87\xc4\x5d\x50\xea\x95\x94\xcd\x8a\xca\xe7\xbf\xac\xdb\xb4\xef\xaf\xe5\xd3\x3c\xf5\xa5\x79\x13\xaa\x39\xb7\xbe\xa2\xe1\xba\xc9\x9f\x93\xb5\xcc\x5a\xce\xbf\xc6\x6e\x9f\xd1\xac\xd7\xff\x3d\x59\xd5\x37\x4f\x2b\x5c\x57\x95\x23\x2c\xae\xab\x7e\x03\x00\x00\xff\xff\xa2\x45\x96\xa5\x83\x01\x00\x00")

func assetsRandomSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsRandomSvg,
		"assets/random.svg",
	)
}

func assetsRandomSvg() (*asset, error) {
	bytes, err := assetsRandomSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/random.svg", size: 387, mode: os.FileMode(436), modTime: time.Unix(1490535047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRepeatSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4e\xc3\x30\x10\x44\xef\xf9\x8a\xd1\x72\x2d\xf5\xc6\xad\xa5\x0a\xc5\x39\x70\xe7\x23\x10\x35\xeb\x88\x90\x54\xb1\x15\xa7\x7c\x3d\xb2\x71\x01\x55\x96\x3d\x1a\x6b\xf4\x76\xb6\x0b\xab\x60\xfb\x1c\xa7\x60\xc9\xc7\x78\x79\x52\x2a\xa5\xb4\x4f\x87\xfd\xbc\x88\xd2\xcc\xac\xc2\x2a\x84\x34\x9c\xa3\xb7\xa4\x99\x09\xde\x0d\xe2\x63\x35\xeb\xe0\xd2\xf3\xbc\x59\x62\x30\x34\x97\x4b\x7d\xd3\x09\x42\x5c\xe6\x0f\x67\xe9\xe1\xc8\xf9\x50\xfd\x78\xac\xa8\x56\x13\xde\x87\x71\xfc\x0b\xf4\x0d\x00\x74\x97\xd7\xe8\x71\xb6\xf4\x82\x93\xd9\x69\x83\xb6\x35\xbb\x23\x67\x63\x0c\xbe\x48\xd5\x98\xdc\xf1\x4e\x37\xdc\x34\x4f\xae\xb2\x4a\x70\x71\x6f\x11\x9b\xa5\x5c\xe1\xfa\x23\xbf\x15\xfe\x6d\x53\xcc\xb2\x59\x3a\x64\xbd\x16\xbd\xcd\x52\xd2\x37\xf5\x09\xab\xf4\xcd\x77\x00\x00\x00\xff\xff\x5e\x9e\x3f\xba\x36\x01\x00\x00")

func assetsRepeatSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsRepeatSvg,
		"assets/repeat.svg",
	)
}

func assetsRepeatSvg() (*asset, error) {
	bytes, err := assetsRepeatSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/repeat.svg", size: 310, mode: os.FileMode(436), modTime: time.Unix(1490535180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSettingsSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x6e\x84\x20\x10\x86\xef\x3e\xc5\x64\x7a\x65\x97\x19\x44\xcd\x36\x6a\xd2\xde\xfb\x10\x4d\xd6\xa2\xa9\xd5\xcd\x42\x64\xd3\xa7\x6f\x14\x6a\xd3\xa4\xec\xa9\x31\x32\x01\xbe\xf9\xf8\xa1\xb6\x8b\x81\xdb\xc7\x38\xd9\x06\x7b\xe7\x2e\x8f\x52\x7a\xef\x8f\x3e\x3f\xce\x57\x23\x15\x11\x49\xbb\x18\x04\x3f\x9c\x5d\xdf\xa0\x22\x42\xe8\xbb\xc1\xf4\x2e\x4e\x96\xa1\xf3\xcf\xf3\xad\x41\x02\x02\x45\xdb\x8f\x6d\x56\x1b\xb0\xee\x3a\xbf\x77\x0d\x3e\x68\x5a\x3f\x8c\x0b\x87\xa8\x62\x85\xf0\x36\x8c\xe3\x0f\xd0\x66\x00\x00\x7b\xe7\x61\x3f\xf3\x1b\x9c\xe6\xa9\x8b\xd4\x46\x5e\x5e\x5d\x0f\xe7\x06\x5f\x80\x89\x44\x4e\x5b\x29\x09\x3e\x51\x26\x29\xae\x02\xc6\x3a\xcd\xe5\x24\x98\x08\xca\x50\x92\xb6\x2a\xec\xb3\xfe\x27\x2e\x84\x7f\x02\x4d\x42\xaf\xaf\xc9\x82\xf7\xa8\xf7\x6e\xa4\xff\x6a\x2a\x93\x3d\x05\x89\x82\xa0\x62\x51\x71\x32\x4b\x41\x82\x03\xc4\xea\x94\x4e\x1c\x54\xac\x4e\xf7\x5c\x1c\x65\x2b\xf6\xcb\x56\x4b\xd3\x66\x71\xb0\x8b\x69\xb3\xaf\x00\x00\x00\xff\xff\x38\xf2\x81\x5c\x8d\x02\x00\x00")

func assetsSettingsSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsSettingsSvg,
		"assets/settings.svg",
	)
}

func assetsSettingsSvg() (*asset, error) {
	bytes, err := assetsSettingsSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/settings.svg", size: 653, mode: os.FileMode(436), modTime: time.Unix(1490712532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/app.css": assetsAppCss,
	"assets/app.html": assetsAppHtml,
	"assets/app.js": assetsAppJs,
	"assets/back.svg": assetsBackSvg,
	"assets/main.svg": assetsMainSvg,
	"assets/next.svg": assetsNextSvg,
	"assets/pause.svg": assetsPauseSvg,
	"assets/play.svg": assetsPlaySvg,
	"assets/prev.svg": assetsPrevSvg,
	"assets/random.svg": assetsRandomSvg,
	"assets/repeat.svg": assetsRepeatSvg,
	"assets/settings.svg": assetsSettingsSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{assetsAppCss, map[string]*bintree{}},
		"app.html": &bintree{assetsAppHtml, map[string]*bintree{}},
		"app.js": &bintree{assetsAppJs, map[string]*bintree{}},
		"back.svg": &bintree{assetsBackSvg, map[string]*bintree{}},
		"main.svg": &bintree{assetsMainSvg, map[string]*bintree{}},
		"next.svg": &bintree{assetsNextSvg, map[string]*bintree{}},
		"pause.svg": &bintree{assetsPauseSvg, map[string]*bintree{}},
		"play.svg": &bintree{assetsPlaySvg, map[string]*bintree{}},
		"prev.svg": &bintree{assetsPrevSvg, map[string]*bintree{}},
		"random.svg": &bintree{assetsRandomSvg, map[string]*bintree{}},
		"repeat.svg": &bintree{assetsRepeatSvg, map[string]*bintree{}},
		"settings.svg": &bintree{assetsSettingsSvg, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

